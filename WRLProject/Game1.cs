using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace WRLProject
{

    public class Game1 : Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;
        public enum GameState { SplashScreen, MainMenu, MainGame, GameOver, FinishLv1, Settings }
        public GameState gameState = GameState.SplashScreen;

        #region Variables for Splash Screen

        public bool isShowingUp;
        Texture2D splashTex;
        Vector2 splashPos;
        Rectangle splashRect;
        float splashTimer;
        List<SplashScreen> screens = new List<SplashScreen>();

        #endregion

        #region Variables for Main Menu

        Button btnPlay, btnSettings, btnQuit;
        Texture2D screen01;
        Rectangle screen01Rect;

        #endregion

        #region Variables for Main Game

        // Loading up camera class
        Camera camera;

        // GUI Position
        SpriteFont HeadsUpDisplay;
        Vector2 plyrHPPosition;
        Vector2 bossHPPosition;
        Vector2 plyrLifePosition;
        Vector2 plyrAPPosition;
        Vector2 plyrAmmoPosition;
        Vector2 scorePosition;

        // Add scoring
        public int score;

        // Has knife?
        public bool hasKnife = false;

        // Background
        Texture2D screen02;
        Rectangle screen02Rect;

        #region Player Variables

        // Calling in the player
        Player player; // added as object,
        TileMap map; // creating an object,

        // Player textures
        Texture2D dummyTex;
        Texture2D plyTexture;
        //Texture2D plyAtkTex;

        Bullet bullet;

        private Vector2 velocity;
        public Vector2 plyPosition;

        Collider collider;
        List<Collider> colliders = new List<Collider>();

        // Sound Effects
        //SoundEffect effect;

        // Directions for the bullets to spawn at
        public enum Directions { Left, Right };
        Directions curDir = Directions.Right;
        public Directions CurDir { get { return curDir; } set { curDir = value; } }

        // Bool whether the player is attacking
        public bool isAttacking = false;

        // Player Bullets
        Texture2D bulletSprite;
        Texture2D bulletSpriteLeft;
        Rectangle bulletRect;
        float bulletDelay = 50;
        public int bulletVelocity = 10;
        Point bulletStartPos;
        List<Bullet> activeBullets = new List<Bullet>();
        List<Bullet> inactiveBullets = new List<Bullet>();
        bool bulletSpawned;

        // INTEGER SECTION
        //int plyrSpeed = 10; // player speed 

        // bool indicating whether the player is dead
        public bool isDead = false;

        // Lives, HP, AP and Ammo
        public int plyrLife; // player LIfe
        public int plyrHP; // Player HP
        public int plyrAP;
        int plyrAmmo;

        #endregion

        #region Enemy Variables

        //Enemy enemy;
        Texture2D enemyTex;
        List<Enemy> enemies = new List<Enemy>();
        //public Texture2D texture;

        #endregion

        #region Boss Variables

        //Boss Game Object
        Boss boss;

        //Boss Section
        Texture2D bossTex;
        List<Boss> bosses = new List<Boss>();
        List<Boss> deadBosses = new List<Boss>();

        // Boss Bullets
        Texture2D bossBulletSprite;
        Rectangle bossBulletRect;
        float bossBulletDelay = 50;
        public int bossBulletVelocity = 10;
        Point bossBulletStartPos;
        List<Bullet> bossActiveBullets = new List<Bullet>();
        List<Bullet> bossInactiveBullets = new List<Bullet>();
        bool bossBulletSpawned;

        // Boss HP
        int bossHP;

        #endregion

        #region Powerup variables

        // Health section
        HealthPowerup hlth; //object
        Texture2D hlthTexture;
        Vector2 hlthPosition;
        public Rectangle healthRect;  //declares the Rectangle 
        public Vector2 spawnPosition; // Position to Spawn the object 
        List<HealthPowerup> hlthPowerUps = new List<HealthPowerup>();
        List<HealthPowerup> inactivehlthPowerUps = new List<HealthPowerup>();

        // Knife section
        KnifePowerup knife; //PowerUp Management
        Texture2D knifeTexture;
        Vector2 knifePosition;
        List<KnifePowerup> knifePowerUps = new List<KnifePowerup>();
        List<KnifePowerup> inactiveKnifePowerUps = new List<KnifePowerup>();

        // Gun section
        GunPowerup gun; //PowerUp Management
        Texture2D gunTexture;
        Vector2 gunPosition;
        List<GunPowerup> gunPowerUps = new List<GunPowerup>();
        List<GunPowerup> inactiveGunPowerUps = new List<GunPowerup>();
        private bool hasGun;

        // Ammo section
        AmmoPowerup ammo; //PowerUp Management
        Texture2D ammoTexture;
        Vector2 ammoPosition;
        List<AmmoPowerup> ammoPowerUps = new List<AmmoPowerup>();
        List<AmmoPowerup> inactiveAmmoPowerUps = new List<AmmoPowerup>();

        // Ammo section
        ArmourPowerup armour; //PowerUp Management
        Texture2D armourTexture;
        Vector2 armourPosition;
        List<ArmourPowerup> armourPowerUps = new List<ArmourPowerup>();
        List<ArmourPowerup> inactiveArmourPowerUps = new List<ArmourPowerup>();

        #endregion

        #endregion

        #region Variables for Pause Screen

        public bool paused = false;
        Texture2D pausedTexture;
        Rectangle pausedRectangle;
        Button btnResume, btnQuittoMenu;
        Vector2 btnQuittoMenuPos;

        #endregion

        #region Variables for Settings Screen

        // Background
        Texture2D screen05;
        Rectangle screen05Rect;

        // Buttons
        Button btnChangeControls, btnReverseChangeControls, btnReturn;

        #endregion

        #region Variables for Game Over Screen

        Texture2D screen03;
        Rectangle screen03Rect;

        #endregion

        #region Variable for Finish Level 1 Screen

        // Background
        Texture2D screen04;
        Rectangle screen04Rect;

        #endregion

        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            graphics.IsFullScreen = false;

            // Dimensions of the game
            graphics.PreferredBackBufferHeight = 960;
            graphics.PreferredBackBufferWidth = 1800;
            Content.RootDirectory = "Content";
        }


        protected override void Initialize()
        {
            map = new TileMap();// used to initialise TileMap Object
            //player = new Player(new Vector2(50, 100), 1, 8, Content); // ised to  initialise Player Object
            //plyrLife = 3;

            //IsMouseVisible = true;

            // initialising the score
            score = 0;
            plyrLife = 3;
            plyrHP = 100;
            plyrAP = 0;
            bossHP = 100;
            plyrAmmo = 200;

            // GUI position of scores
            plyrAmmoPosition.X = 1050;
            plyrAmmoPosition.Y = 10;
            plyrLifePosition.X = 900;
            plyrLifePosition.Y = 10;
            plyrAPPosition.X = 750;
            plyrAPPosition.Y = 10;
            plyrHPPosition.X = 600;
            plyrHPPosition.Y = 10;
            bossHPPosition.X = 450;
            bossHPPosition.Y = 10;
            scorePosition.X = 300;
            scorePosition.Y = 10;

            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>

        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);

            // Font for the GUI
            HeadsUpDisplay = Content.Load<SpriteFont>("Font");
            //effect = Content.Load<SoundEffect>("Jumpfx");

            #region Loading up Content for Splash Screen

            splashPos = new Vector2(splashRect.X, splashRect.Y);
            splashTex = Content.Load<Texture2D>("SplashScreen");
            splashRect = new Rectangle(0, 0, splashTex.Width, splashTex.Height);
            screens.Add(new SplashScreen(splashPos, splashTex, splashRect));

            #endregion

            #region Loading up Content for Main Menu

            screen01 = Content.Load<Texture2D>("MainMenu");
            screen01Rect = new Rectangle(0, 0, screen01.Width, screen01.Height);
            btnPlay = new Button();
            btnPlay.Load(Content.Load<Texture2D>("PlayButton"), new Vector2(350, 375));
            btnSettings = new Button();
            btnSettings.Load(Content.Load<Texture2D>("SettingsButton"), new Vector2(350, 525));
            btnQuit = new Button();
            btnQuit.Load(Content.Load<Texture2D>("ExitButton"), new Vector2(350, 675));

            #endregion

            #region Loading up Content for Main Game

            // Loading up the background
            screen02 = Content.Load<Texture2D>("GameBackground");
            screen02Rect = new Rectangle(0, 0, screen02.Width, screen02.Height);

            dummyTex = new Texture2D(GraphicsDevice, 1, 1, false, SurfaceFormat.Color);
            dummyTex.SetData(new[] { Color.White });

            //Loading up the camera
            camera = new Camera(GraphicsDevice.Viewport);
            Tile.Content = Content; //Calling Tile Class

            #region Tile Map
            map.Generate(new int[,] {
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,0,0,0,0,1,1,1,1,1,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            }, 50);
            #endregion

            #region Player Properties with Bullets

            // Spawning in the player
            //player = new Player(new Vector2(1, 2), plyTexture, 2, 8, this);  
            plyPosition = new Vector2(1, 2);
            plyTexture = Content.Load<Texture2D>("jimmiFullSheet");
            //plyTexture = Content.Load<Texture2D>("jimmiRunningSheet");
            isDead = false;
            player = new Player(plyPosition, plyTexture, 4, 8, this, isDead);

            // Adding in the bullets and where to spawn from the player
            bulletSprite = Content.Load<Texture2D>("Bullet");
            bulletSpriteLeft = Content.Load<Texture2D>("Bullet (Left)");
            bulletRect = new Rectangle((int)bulletStartPos.X, (int)bulletStartPos.Y, 5, 5);

            #endregion

            #region Adding Enemies
            enemyTex = Content.Load<Texture2D>("MinionWalkingSpriteSheet");
            enemies.Add(new Enemy(new Vector2(525, 723), enemyTex, 1, 11));
            enemies.Add(new Enemy(new Vector2(1330, 873), enemyTex, 1, 11));
            enemies.Add(new Enemy(new Vector2(2050, 873), enemyTex, 1, 11));
            enemies.Add(new Enemy(new Vector2(3850, 273), enemyTex, 1, 11));
            enemies.Add(new Enemy(new Vector2(4850, 623), enemyTex, 1, 11));
            enemies.Add(new Enemy(new Vector2(5550, 1023), enemyTex, 1, 11));
            #endregion

            #region Boss Properties with its Bullets

            // Adding in the bullets for the boss and where to spawn
            bossBulletSprite = Content.Load<Texture2D>("Bullet");
            bossBulletRect = new Rectangle((int)bossBulletStartPos.X, (int)bossBulletStartPos.Y, 5, 5);
            //bosses.Add(new Boss(new Vector2(6180, 1668), bossTex, 1, 8));
            bossTex = Content.Load<Texture2D>("JONNIIdleShooting");
            bosses.Add(new Boss(new Vector2(7500, 1168), bossTex, 1, 8));

            #endregion

            #region Powerup Management

            // Adding in 1 Up and where to spawn at
            hlthTexture = Content.Load<Texture2D>("Healthpowerup");
            hlthPosition = new Vector2(500, 150);
            hlthPowerUps.Add(new HealthPowerup(hlthTexture, hlthPosition));

            // Adding in Knife Powerup and where to spawn at
            knifeTexture = Content.Load<Texture2D>("KnifePowerup");
            knifePowerUps.Add(new KnifePowerup(knifeTexture, new Vector2(1500, 750)));

            // Adding in Gun Powerup and where to spawn at
            gunTexture = Content.Load<Texture2D>("GunPowerup");
            gunPosition = new Vector2(800, 600);
            gunPowerUps.Add(new GunPowerup(gunTexture, gunPosition));

            // Adding in Ammo Powerup and where to spawn at
            ammoTexture = Content.Load<Texture2D>("AmmoPowerup");
            ammoPosition = new Vector2(1000, 600);
            ammoPowerUps.Add(new AmmoPowerup(ammoTexture, ammoPosition));

            // Adding in Armour Powerup and where to spawn at
            armourTexture = Content.Load<Texture2D>("ArmourPowerup");
            armourPosition = new Vector2(1200, 600);
            armourPowerUps.Add(new ArmourPowerup(armourTexture, armourPosition));

            #endregion

            #endregion

            #region Loading up Content for Pause Screen

            pausedTexture = Content.Load<Texture2D>("PauseScreen");
            pausedRectangle = new Rectangle(0, 0, pausedTexture.Width, pausedTexture.Height);
            btnResume = new Button();
            btnResume.Load(Content.Load<Texture2D>("PlayButton"), new Vector2(350, 375));
            btnQuittoMenu = new Button();
            btnQuittoMenu.Load(Content.Load<Texture2D>("ExitButton"), new Vector2(350, 525));

            #endregion

            #region Loading up Content for Game Over Screen

            screen03 = Content.Load<Texture2D>("GameOver");
            screen03Rect = new Rectangle(0, 0, screen03.Width, screen03.Height);
            btnQuittoMenu = new Button();
            btnQuittoMenuPos = new Vector2(350, 375);
            btnQuittoMenu.Load(Content.Load<Texture2D>("ExitButton"), btnQuittoMenuPos);

            #endregion

            #region Loading up Content for Finish Level 1 screen

            screen04 = Content.Load<Texture2D>("FinishLv1");
            screen04Rect = new Rectangle(0, 0, screen04.Width, screen04.Height);
            btnQuittoMenu = new Button();
            btnQuittoMenuPos = new Vector2(350, 375);
            btnQuittoMenu.Load(Content.Load<Texture2D>("ExitButton"), btnQuittoMenuPos);

            #endregion

            #region Loading up Content for Settings Screen

            screen05 = Content.Load<Texture2D>("Settings");
            screen05Rect = new Rectangle(0, 0, screen05.Width, screen05.Height);
            btnChangeControls = new Button();
            btnChangeControls.Load(Content.Load<Texture2D>("WASDButton"), new Vector2(350, 375));
            btnReverseChangeControls = new Button();
            btnReverseChangeControls.Load(Content.Load<Texture2D>("Anti-WASDButton"), new Vector2(350, 525));
            btnReturn = new Button();
            btnReturn.Load(Content.Load<Texture2D>("ReturnButton"), new Vector2(350, 675));

            #endregion

        }

        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        protected override void Update(GameTime gameTime)
        {
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
                Exit();

            KeyboardState ks = Keyboard.GetState();
            MouseState mouse = Mouse.GetState();

            splashTimer += (float)gameTime.ElapsedGameTime.TotalSeconds;

            switch (gameState)
            {
                #region Splash Screen Update

                case GameState.SplashScreen:

                    IsMouseVisible = false;
                    splashTimer += (float)gameTime.ElapsedGameTime.TotalSeconds;
                    isShowingUp = true;

                    foreach (SplashScreen s in screens)
                    {
                        s.Update(gameTime);
                        isShowingUp = true;
                    }

                    foreach (SplashScreen s in screens)
                    {
                        if (splashTimer > 5f)
                        {
                            gameState = GameState.MainMenu;
                            isShowingUp = false;
                        }
                    }
                    break;

                #endregion

                #region Main Menu Update

                case GameState.MainMenu:

                    IsMouseVisible = true;
                    isDead = false;

                    if (btnPlay.isClicked)
                        gameState = GameState.MainGame;

                    if (btnSettings.isClicked)
                        gameState = GameState.Settings;

                    if (btnQuit.isClicked)
                        Exit();

                    btnPlay.Update(mouse);
                    btnSettings.Update(mouse);
                    btnQuit.Update(mouse);

                    if (ks.IsKeyDown(Keys.NumPad1))
                    {
                        gameState = GameState.MainGame;
                        /*ButtonTexture[FirstButtonIndex] = Content.Load<Texture2D>("easy");
                        ButtonTexture[SecondButtonIndex] = Content.Load<Texture2D>("medium");
                        ButtonTexture[ThirdButtonIndex] = Content.Load<Texture2D>("hard");*/
                    }

                    if (ks.IsKeyDown(Keys.NumPad3))
                    {
                        gameState = GameState.Settings;
                        
                    }
                    break;

                #endregion

                #region Main Game Update

                case GameState.MainGame:

                    IsMouseVisible = false;
                    isDead = false;
                    player.Update(gameTime);

                    foreach (Enemy e in enemies)
                    {
                        e.Update(gameTime);
                    }

                    foreach (Enemy e in enemies)
                    {
                        if (e.enemyRect.Intersects(player.rectangle))
                        {
                            plyrHP -= 1;

                            if (plyrHP <= 0)
                                isDead = true;

                            if (isDead)
                            {
                                ResetPosition();
                                ResetBoss();
                                plyrHP = 100;
                                plyrAP = 0;
                                plyrLife -= 1;

                                if (plyrLife < 0)
                                {
                                    gameState = GameState.GameOver;
                                    break;
                                }
                                //ResetEnemies();                                                     

                                //gameState = GameState.GameOver;dfhfg
                                break;
                            }
                        }

                        /*else if (e.enemyRect.Intersects(player.rectangle) && plyrAP == 0)
                        {
                            plyrHP -= 1;
                        }*/
                            
                    }

                    foreach (Enemy e in enemies)
                    {
                        if (e.attackRect.Intersects(player.rectangle))
                        {
                            if (ks.IsKeyDown(Keys.L))
                            {
                                //Enemies.Add(e);
                                score += 100;
                                enemies.Remove(e);
                                break;
                            }
                        }
                    }

                    foreach (Bullet b in activeBullets)
                    { 
                        foreach (Enemy e in enemies)
                        {
                            if (e.attackRect.Intersects(b.rect))
                            {
                                //inActiveEnemies.Add(e);
                                score += 100;
                                enemies.Remove(e);
                                inactiveBullets.Add(b);
                                break;
                            }
                        }
                    }

                    foreach (Bullet b in activeBullets)
                    {
                        foreach (Boss bA in bosses)
                        {
                            if (bA.bossRect.Intersects(b.rect))
                            {
                                bossHP -= 10;
                                inactiveBullets.Add(b);
                                if (bossHP == 0)
                                {
                                    score += 500;
                                    bosses.Remove(bA);
                                    deadBosses.Add(bA);
                                    bossBulletSpawned = false;
                                    break;
                                }
                                //inActiveEnemies.Add(e);
                                break;
                            }
                        }
                    }                  

                    /*if(plyrHP == 0)
                    {
                        isDead = true;
                        player.Remove(gameTime);
                    }*/

                    #region Boss
                    //Adding boss bullets
                    /*if ((bosses.Count >= 1 && !bossBulletSpawned))
                    {
                        foreach(Boss b in bosses)
                        {
                            if ((player.shootAtMeRect).Intersects(b.bossRect))
                            {
                                bossBulletSpawned = true;
                                bossActiveBullets.Add(new Bullet(new Vector2(bosses[0].currentPos.X - 2, bosses[0].currentPos.Y - (bosses[0].bossRect.Height / 2)), bossBulletSprite, Directions.Left));
                            }                            
                        }
                    }*/
                    //(player.shootAtMeRect).Intersects(boss.bossRect))

                    foreach (Boss b in bosses)
                    {
                        if ((bosses.Count >= 1 && !bossBulletSpawned) && player.shootAtMeRect.Intersects(b.bossRect))
                        {
                            bossBulletSpawned = true;
                            bossActiveBullets.Add(new Bullet(new Vector2(bosses[0].currentPos.X - 2, bosses[0].currentPos.Y - (bosses[0].bossRect.Height / 2)), bossBulletSprite, Directions.Left));
                        }
                    }
                    

                    foreach (Bullet bA in bossActiveBullets)
                    {
                        if ((player.rectangle).Intersects(bA.rect))
                        {
                            plyrHP -= 5;
                            bossActiveBullets.Remove(bA);
                            bossInactiveBullets.Add(bA);
                            if (plyrHP == 0)
                            {
                                isDead = true;
                                //gameState = GameState.GameOver;
                                if (isDead)
                                {
                                    ResetPosition();
                                    ResetBoss();
                                    plyrLife -= 1;
                                    plyrHP = 100;
                                    plyrAP = 0;

                                    if (plyrLife < 0)
                                    {
                                        gameState = GameState.GameOver;
                                        break;
                                    }

                                    break;
                                }
                                break;
                            }
                            break;
                        }
                    }

                    foreach (Bullet bA in bossActiveBullets)
                    {
                        bA.Update();
                    }

                    foreach (Bullet bI in bossInactiveBullets)
                    {
                        bossActiveBullets.Remove(bI);
                    }

                    if (bossBulletDelay >= 0)
                    {
                        bossBulletDelay--;
                    }
                    if (bossBulletDelay <= 0)
                    {
                        bossBulletDelay = 50;
                        bossBulletSpawned = false;
                    }


                    foreach (Boss b in bosses)
                    {
                        b.Update(gameTime);
                    }

                    /*foreach (Boss b in bosses)
                    {
                        if (b.bossRect.Intersects(player.rectangle) && plyrAP <= 100)
                        {
                            plyrAP -= 2; 
                            
                            if (b.bossRect.Intersects(player.rectangle) && plyrAP == 0)
                            {
                                plyrHP -= 2;

                                if (plyrHP == 0)
                                {
                                    isDead = true;
                                    if (isDead)
                                    {
                                        ResetPosition();
                                        ResetBoss();
                                        plyrLife -= 1;
                                        plyrHP = 100;
                                        plyrAP = 0;

                                        if (plyrLife <= 0)
                                        {
                                            gameState = GameState.GameOver;
                                            break;
                                        }

                                        break;
                                    }
                                    break;
                                }
                                break;
                            }
                            break; 
                        }
                        break;
                    }*/

                    foreach (Boss b in bosses)
                    {
                        if (b.bossRect.Intersects(player.rectangle))
                        {
                            plyrHP -= 2;

                            if (plyrHP == 0)                            
                                isDead = true;

                            if (isDead)
                            {
                                ResetPosition();
                                ResetBoss();
                                plyrLife -= 1;
                                plyrHP = 100;
                                plyrAP = 0;

                                if (plyrLife <= 0)
                                {
                                    gameState = GameState.GameOver;
                                    break;
                                }
                                break;

                            }
                            break;
                        }
                    }

                    foreach (Boss b in bosses)
                    {
                        if (b.fightRect.Intersects(player.rectangle))
                        {
                            if (ks.IsKeyDown(Keys.L))
                            {
                                bossHP -= 10;
                                    if (bossHP == 0)
                                    {
                                        deadBosses.Add(b);
                                        //score += 100;
                                        bosses.Remove(b);
                                        break;
                                    }
                                break;
                            }
                        }
                    }
                    #endregion 

                    foreach (Bullet b in activeBullets)
                    {
                        b.Update();
                    }

                    foreach (Bullet b in inactiveBullets)
                    {
                        activeBullets.Remove(b);
                    }

                    if (ks.IsKeyDown(Keys.Space) && hasGun && !bulletSpawned)
                    {
                        bulletSpawned = true;

                        if(bulletSpawned)
                            plyrAmmo -= 1;

                        if(bulletSpawned && (curDir == Directions.Left || curDir == Directions.Right))
                            activeBullets.Add(new Bullet(new Vector2(player.position.X + player.rectangle.Width / 2, player.position.Y + player.rectangle.Height / 2), bulletSprite, curDir));
                    }

                    //Shooting Right
                    /*if (ks.IsKeyDown(Keys.Space) && hasGun && !bulletSpawned)
                    {
                        bulletSpawned = true;

                        activeBullets.Add(new Bullet(new Vector2(player.position.X + player.rectangle.Width / 2, player.position.Y + player.rectangle.Height / 2), bulletSprite, curDir));
                    }*/

                    if (bulletDelay >= 0)
                    {
                        bulletDelay--;
                    }
                    if (bulletDelay <= 0)
                    {
                        bulletDelay = 50;
                        bulletSpawned = false;
                    }

                    foreach (HealthPowerup h in hlthPowerUps)
                    {
                        h.Update(gameTime, this);
                    }

                    foreach (HealthPowerup h in hlthPowerUps)
                    {
                        if (player.rectangle.Intersects(h.healthRect))
                        {
                            inactivehlthPowerUps.Add(h);
                            hlthPowerUps.Remove(h);
                            plyrLife++;
                            break;
                        }
                    }

                    foreach (KnifePowerup k in knifePowerUps)
                    {
                        k.Update(gameTime, this);
                    }

                    foreach (KnifePowerup k in knifePowerUps)
                    {
                        if (player.rectangle.Intersects(k.knifeRect))
                        {
                            inactiveKnifePowerUps.Add(k);
                            knifePowerUps.Remove(k);
                            player.hasKnife = true;
                            break;
                        }
                    }

                    foreach (GunPowerup g in gunPowerUps)
                    {
                        g.Update(gameTime, this);
                    }

                    foreach (GunPowerup g in gunPowerUps)
                    {
                        if (player.rectangle.Intersects(g.gunRect))
                        {
                            if (!hasGun)
                               hasGun = true;

                            inactiveGunPowerUps.Add(g);
                            gunPowerUps.Remove(g);
                            break;
                        }
                    }

                    foreach (AmmoPowerup a in ammoPowerUps)
                    {
                        a.Update(gameTime, this);
                    }

                    foreach (AmmoPowerup a in ammoPowerUps)
                    {
                        if (player.rectangle.Intersects(a.ammoRect))
                        {
                            inactiveAmmoPowerUps.Add(a);
                            ammoPowerUps.Remove(a);
                            plyrAmmo += 100;
                            break;
                        }
                    }

                    foreach (ArmourPowerup ar in armourPowerUps)
                    {
                        ar.Update(gameTime, this);
                    }

                    foreach (ArmourPowerup ar in armourPowerUps)
                    {
                        if (player.rectangle.Intersects(ar.armourRect))
                        {
                            inactiveArmourPowerUps.Add(ar);
                            armourPowerUps.Remove(ar);
                            plyrAP += 100;
                            break;
                        }
                    }

                    //Right check
                    foreach (Collider c in colliders)
                    {
                        if (player.rightCol.Intersects(c.rect))
                        {
                            player.canMoveRight = false;
                            player.position.X = c.rect.Left - player.boundsRect.Width;
                            break;
                        }
                        else
                        {
                            player.canMoveRight = true;
                        }
                    }

                    //Left check
                    foreach (Collider c in colliders)
                    {
                        if (player.leftCol.Intersects(c.rect))
                        {
                            player.canMoveLeft = false;
                            player.position.X = c.rect.Right;
                            break;

                        }
                        else
                        {
                            player.canMoveLeft = true;
                        }
                    }

                    //Top check
                    foreach (Collider c in colliders)
                    {
                        if (player.upCol.Intersects(c.rect))
                        {
                            player.canMoveUp = false;
                            player.position.Y = c.rect.Bottom + 1;
                            break;
                        }
                        else
                        {
                            player.canMoveUp = true;
                        }
                    }

                    //Bottom check
                    foreach (Collider c in colliders)
                    {
                        if (player.downCol.Intersects(c.rect))
                        {
                            player.canMoveDown = false;
                            player.position.Y = c.rect.Top - player.boundsRect.Height - 1;
                            break;
                        }
                        else
                        {
                            player.canMoveDown = true;
                        }
                    }

                    if (!paused)
                    {
                        if (ks.IsKeyDown(Keys.P))
                        {
                            paused = true;
                            btnResume.isClicked = false;
                        }

                        foreach (Enemy e in enemies)
                        {
                            e.Update(gameTime);
                        }

                        //player.Update(gameTime);

                        foreach (Bullet bA in bossActiveBullets)
                        {
                            bA.Update();
                        }

                        foreach (Bullet bI in bossInactiveBullets)
                        {
                            bossActiveBullets.Remove(bI);
                        }

                        foreach (Boss b in bosses)
                        {
                            b.Update(gameTime);
                        }

                        foreach (Bullet b in activeBullets)
                        {
                            b.Update();
                        }

                        foreach (Bullet b in inactiveBullets)
                        {
                            activeBullets.Remove(b);
                        }

                        foreach (HealthPowerup h in hlthPowerUps)
                        {
                            h.Update(gameTime, this);
                        }

                        foreach (KnifePowerup k in knifePowerUps)
                        {
                            k.Update(gameTime, this);
                        }

                        foreach (GunPowerup g in gunPowerUps)
                        {
                            g.Update(gameTime, this);
                        }

                        foreach (AmmoPowerup a in ammoPowerUps)
                        {
                            a.Update(gameTime, this);
                        }

                        foreach (ArmourPowerup ar in armourPowerUps)
                        {
                            ar.Update(gameTime, this);
                        }
                    }

                    else if (paused)
                    {
                        IsMouseVisible = true;
                        if (btnResume.isClicked)
                            paused = false;
                        if (btnQuittoMenu.isClicked)
                            gameState = GameState.MainMenu;

                        if (ks.IsKeyDown(Keys.P))
                        {
                            paused = false;
                        }

                        btnResume.Update(mouse);
                        btnQuittoMenu.Update(mouse);
                    }                   

                    foreach (CollisionTiles tile in map.CollisionTiles)
                    { //new line here for camera class to work
                        player.Collision(tile.Rectangle, map.Width, map.Height, tile.TileID, this);
                        //=============== added in a new line here for camera 
                        //===== to update position and map width, height
                        //===== for every loop of collision check camera 
                        //===== position against objs. 
                        camera.Update(player.Position, map.Width, map.Height);
                    }// new line added here to allow camera class to work

                    /*if (plyrLife <= 0)
                    {
                        gameState = GameState.GameOver;
                    }*/

                    break;

                #endregion

                #region Game Over Update

                case GameState.GameOver:

                    IsMouseVisible = true;

                    if (btnQuittoMenu.isClicked)
                        gameState = GameState.MainMenu;

                    btnQuittoMenu.Update(mouse);

                    break;

                #endregion

                #region Finish Level 1 Update

                case GameState.FinishLv1:

                    IsMouseVisible = true;

                    if (btnQuittoMenu.isClicked)
                        gameState = GameState.MainMenu;

                    btnQuittoMenu.Update(mouse);

                    break;

                #endregion

                #region Setting Update

                case GameState.Settings:

                    /*foreach (Button b in settingsButtons)
                    {
                        b.Update();
                    }*/

                    if (btnChangeControls.isClicked)
                        IsMouseVisible = false;

                    if (btnReverseChangeControls.isClicked)
                        IsMouseVisible = true;

                    if (btnReturn.isClicked)
                        gameState = GameState.MainMenu;

                    //if (btnReverseChangeControls.isClicked)
                    //gameState = GameState.MainMenu;

                    btnChangeControls.Update(mouse);
                    btnReverseChangeControls.Update(mouse);
                    btnReturn.Update(mouse);

                    if (ks.IsKeyDown(Keys.NumPad3))
                    {
                        gameState = GameState.MainMenu;
                    }
                    break;

                    #endregion
            }

            base.Update(gameTime);
        }

        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);
            Window.Title = "Unifinished Business";

            switch (gameState)
            {

                #region Splash Screen Draw

                case GameState.SplashScreen:
                    spriteBatch.Begin();
                    spriteBatch.Draw(splashTex, splashRect, Color.White);
                    /*foreach (SplashScreen s in screens)
                    {
                        s.Draw(spriteBatch);
                    }*/
                    spriteBatch.End();
                    break;

                #endregion

                #region Main Menu Draw

                case GameState.MainMenu:
                    spriteBatch.Begin();
                    spriteBatch.Draw(screen01, screen01Rect, Color.White);
                    btnPlay.Draw(spriteBatch);
                    btnSettings.Draw(spriteBatch);
                    btnQuit.Draw(spriteBatch);                   
                    spriteBatch.End();
                    break;

                #endregion

                #region Main Game Draw

                case GameState.MainGame:
                    //======== modifying code for camera object ======
                    spriteBatch.Begin(SpriteSortMode.Deferred,
                                      BlendState.AlphaBlend,
                                      null, null, null, null,
                                      camera.Transform);
                    //================================================
                    spriteBatch.Draw(screen02, screen02Rect, Color.White); ///fyfliyfvkuyfk,hytfktd,ytdkmytdmytdmtde
                    //hlth.Draw(spriteBatch);
                    //knife.Draw(spriteBatch);
                    map.Draw(spriteBatch);
                    player.Draw(spriteBatch); //allow to Display player    

                    foreach (Enemy e in enemies)
                    {
                        e.Draw(spriteBatch);
                    }

                    foreach (Bullet b in activeBullets)
                    {
                        b.Draw(spriteBatch);
                    }

                    foreach (Bullet bA in bossActiveBullets)
                    {
                        bA.Draw(spriteBatch);
                    }

                    foreach (HealthPowerup h in hlthPowerUps)
                    {
                        h.Draw(spriteBatch);
                    }

                    foreach (KnifePowerup k in knifePowerUps)
                    {
                        k.Draw(spriteBatch);
                    }

                    foreach (GunPowerup g in gunPowerUps)
                    {
                        g.Draw(spriteBatch);
                    }

                    foreach (AmmoPowerup a in ammoPowerUps)
                    {
                        a.Draw(spriteBatch);
                    }

                    foreach (ArmourPowerup ar in armourPowerUps)
                    {
                        ar.Draw(spriteBatch);
                    }

                    foreach (Boss b in bosses)
                    {
                        b.Draw(spriteBatch);
                    }

                    player.Draw(spriteBatch);
                    //spriteBatch.DrawString(HeadsUpDisplay, "Score: " + score.ToString(), HUDPosition, Color.White);
                    /*DrawBorder(player.rectangle, 1, Color.Pink);
                    DrawBorder(player.shootAtMeRect, 1, Color.DarkOliveGreen);*/


                    //spriteBatch.Draw(bulletSprite, bulletRect, Color.White);


                    //If shooting right..
                    if (curDir == Directions.Right)
                        spriteBatch.Draw(bulletSprite, bulletRect, null, Color.White, 0, new Vector2(0, 0), SpriteEffects.None, 0);

                    //If shooting left..
                    else if (curDir == Directions.Left)
                        spriteBatch.Draw(bulletSprite, bulletRect, null, Color.White, 0, new Vector2(0, 0), SpriteEffects.FlipHorizontally, 0);

                    /*DrawBorder(player.downCol, 1, Color.Blue);
                    DrawBorder(player.leftCol, 1, Color.Magenta);
                    DrawBorder(player.rightCol, 1, Color.Cyan);*/

                    /*foreach (Collider c in colliders)
                    {
                        DrawBorder(c.rect, 1, Color.HotPink);
                    }*/

                    /*foreach (Enemy e in enemies)
                    {
                        DrawBorder(e.attackRect, 1, Color.Red);
                    }*/

                    if (paused)
                    {
                        spriteBatch.Draw(pausedTexture, pausedRectangle, Color.White);
                        btnResume.Draw(spriteBatch);
                        btnQuittoMenu.Draw(spriteBatch);
                    }

                    spriteBatch.End();

                    spriteBatch.Begin();
                    spriteBatch.DrawString(HeadsUpDisplay, "Lives: " + plyrLife.ToString(), plyrLifePosition, Color.White);
                    spriteBatch.DrawString(HeadsUpDisplay, "HP: " + plyrHP.ToString(), plyrHPPosition, Color.White);
                    spriteBatch.DrawString(HeadsUpDisplay, "AP: " + plyrAP.ToString(), plyrAPPosition, Color.White);
                    spriteBatch.DrawString(HeadsUpDisplay, "Boss HP: " + bossHP.ToString(), bossHPPosition, Color.White);
                    spriteBatch.DrawString(HeadsUpDisplay, "Ammo: " + plyrAmmo.ToString(), plyrAmmoPosition, Color.White);
                    spriteBatch.DrawString(HeadsUpDisplay, "Score: " + score.ToString(), scorePosition, Color.White);
                    spriteBatch.End();
                    break;

                #endregion

                #region Game Over Draw

                case GameState.GameOver:
                    spriteBatch.Begin();
                    spriteBatch.Draw(screen03, screen03Rect, Color.White);
                    btnQuittoMenu.Draw(spriteBatch);
                    spriteBatch.End();
                    break;

                #endregion

                #region Finish Level 1 Draw

                case GameState.FinishLv1:
                    spriteBatch.Begin();
                    spriteBatch.Draw(screen04, screen04Rect, Color.White);
                    btnQuittoMenu.Draw(spriteBatch);
                    spriteBatch.End();
                    break;

                #endregion

                #region Settings Draw

                case GameState.Settings:
                    spriteBatch.Begin();
                    /*foreach (Button b in settingsButtons)
                    {
                        b.Draw(spriteBatch);
                    }*/
                    spriteBatch.Draw(screen05, screen05Rect, Color.White);
                    btnChangeControls.Draw(spriteBatch);
                    btnReverseChangeControls.Draw(spriteBatch);
                    btnReturn.Draw(spriteBatch);
                    spriteBatch.End();
                    break;

                #endregion

            }

            base.Draw(gameTime);
        }

        private void DrawBorder(Rectangle toDraw, int thickness, Color c)
        {
            //Draw top
            spriteBatch.Draw(dummyTex, new Rectangle(toDraw.X, toDraw.Y, toDraw.Width, thickness), c);
            //Draw Left
            spriteBatch.Draw(dummyTex, new Rectangle(toDraw.X, toDraw.Y, thickness, toDraw.Height), c);
            //Draw Right
            spriteBatch.Draw(dummyTex, new Rectangle((toDraw.X + toDraw.Width - thickness), toDraw.Y, thickness, toDraw.Height), c);
            //Draw Bottom
            spriteBatch.Draw(dummyTex, new Rectangle(toDraw.X, toDraw.Y + toDraw.Height - thickness, toDraw.Width, thickness), c);
        }

        private void ResetPosition()
        {
            player.position = new Vector2(1, 1);
            isDead = false;
        }

        private void ResetEnemies()
        {
            foreach (Enemy e in enemies)
            {
                enemies.Add(e);
            }
        }

        private void ResetBoss()
        {
            foreach (Boss b in deadBosses)
            {
                bosses.Add(b);
            }

            foreach (Boss b in deadBosses)
            {
                deadBosses.Remove(b);
            }
        }
    }
}
